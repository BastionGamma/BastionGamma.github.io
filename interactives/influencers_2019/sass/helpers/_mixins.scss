//  ==========================================================================
//  Mixins
//  ==========================================================================

$rem-default: 16 !default;

// Convert pixels to rems
@function calculate-rem($size) {
  $remSize: $size / $rem-default;
  @return ($remSize) + 0rem;
}

// Set same value for width and height
@mixin size($size: 100%) {
  width: $size;
  height: $size;
}

// CSS transitions
@mixin animate($time: 0.3s, $property: all) {
  @include transition-duration($time);
  @include transition-property($property);
  @include transition-timing-function(ease-in-out); 
}

// Center an element vertically and/or horizontally using relative, absolute, or fixed positioning
// Takes a position, horizontal boolean, and vertical boolean
// Position is included and does not ned to be separately declared
@mixin center($position: absolute, $horizontal: true, $vertical: true) {
  @if ($position == 'relative') {
    position: relative;
  } @else if ($position == 'absolute') {
    position: absolute;
  } @else if ($position == 'fixed') {
    position: fixed;
  } 

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
  } @else if ($horizontal) {
    left: 50%;
    @include transform(translate(-50%, 0));
  } @else if ($vertical) {
    top: 50%;
    @include transform(translate(0, -50%));
  } @else {
    top: initial;
    left: initial;
    @include transform(translate(0, 0));
  }
}

// Better text vertical-align middle
// Centers text and pseudo elements
@mixin ghost-center() {
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; 
    width: .1px;
  }
}

// Generate linear interpolated size values through multiple break points
// @param $property - A string CSS property name
// @param $map - A SASS map of viewport unit and size value pairs
// @requires function linear-interpolation
// @requires function map-sort
// @example
//   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length( map-keys($map) );
  
  // Error if the number of breakpoints is < 2
  @if ($length < 2) { @error "poly-fluid-sizing() $map requires at least values"; }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get( $map, nth($keys,1) );
  
  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys, $i)) {
      #{$property}: linear-interpolation(( 
        nth($keys, $i): map-get($map, nth($keys,$i)), 
        nth($keys, ($i + 1)): map-get($map, nth( $keys, ($i + 1)))) 
      );
    }
  }
  
  // Maxmimum size
  @media (min-width:nth($keys, $length)) {
    #{$property}: map-get($map, nth($keys, $length));
  }
}

// Calculate the definition of a line between two points
// @param $map - A SASS map of viewport widths and size value pairs
// @returns A linear equation as a calc() function
// @example
//   font-size: linear-interpolation((320px: 18px, 768px: 26px));
@function linear-interpolation($map) {
  $keys: map-keys($map);

  @if (length($keys) != 2) { @error "linear-interpolation() $map must be exactly 2 values"; }

  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) / (nth($keys, 2) - nth($keys, 1));
  
  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
  
  // Determine if the sign should be positive or negative
  $sign: "+";

  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }
  
  @return calc(#{$m * 100}vw #{$sign} #{$b});
}

// Sort a SASS list
// @param $list - A SASS list
// @returns A sorted SASS list
// @requires function list-remove
@function list-sort($list) {
  $sortedlist: ();

  @while length($list) > 0 {
    $value: nth($list, 1);

    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }

    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }

  @return $sortedlist;
}

// Sort map by keys
// @param $map - A SASS map
// @returns A SASS map sorted by keys
// @requires function list-sort
@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();

  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }

  @return $sortedMap;
}

// Remove an item from a list
// @param $list - A SASS list
// @param $index - The list index to remove
// @returns A SASS list
@function list-remove($list, $index) {
  $newList: ();

  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list, $i), 'space');
    }
  }

  @return $newList;
}

// Generate media queries for all breakpoints
// Breakpoints map in _variables.scss
@mixin breakpoints($index) {
  @if $index == 1 or $index == 2 { 
    @media only screen and ( min-width: #{$breakpoint-small} ) { @content; }
  } @else if $index == 3 {
    @media only screen and ( min-width: #{$breakpoint-medium} ) { @content; }
  } @else if $index == 4 {
    @media only screen and ( min-width: #{$breakpoint-large} ) { @content; }   
  } @else if $index == 5 {
    @media only screen and ( min-width: #{$breakpoint-xtra-large} ) { @content; }   
  }
}

// Media queries for all breakpoints exclusively for IE11
@mixin ie-breakpoints($index) {
  @if $index == 1 or $index == 2 { 
    @media all and (min-width: #{$breakpoint-small} ) and (-ms-high-contrast: none), (-ms-high-contrast: active) { @content; }
  } @else if $index == 3 {
    @media all and (min-width: #{$breakpoint-medium} ) and (-ms-high-contrast: none), (-ms-high-contrast: active) { @content; }
  } @else if $index == 4 {
    @media all and (min-width: #{$breakpoint-large} ) and (-ms-high-contrast: none), (-ms-high-contrast: active) { @content; }
  } @else if $index == 5 {
    @media all and (min-width: #{$breakpoint-xtra-large} ) and (-ms-high-contrast: none), (-ms-high-contrast: active) { @content; }
  }
}