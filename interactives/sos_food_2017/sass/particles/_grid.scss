
// Variables
$max_grids: 20;

$space-map: (
  wide: (calculate-rem(320): $space-5, calculate-rem(1030): $space-7),
  norm: (calculate-rem(320): $space-4, calculate-rem(1030): $space-6),
  nrw: (calculate-rem(320): $space-3, calculate-rem(1030): $space-5),
  // none: 0,
);

$grid-justify-map: (
  start: start,
  end: end,
  center: center,
  stretch: stretch,
  between: space-between,
  around: space-around,
  even: space-evenly,
);

@for $index from 1 through length($screen-sizes) {
  @include breakpoints($index) { 
    .disp-grid#{nth($screen-sizes, $index)} {
      display: grid;    
    }

    // Responsive gutter sizing
    @each $key, $value in $space-map {
      .grid-#{$key}-gap#{nth($screen-sizes, $index)} { 
        @include poly-fluid-sizing( 'grid-column-gap', $value ); 
        @include poly-fluid-sizing( 'grid-row-gap', $value ); 
      }
    }

    @each $key, $value in $space-map {
      .grid-col-#{$key}-gap#{nth($screen-sizes, $index)} { 
        @include poly-fluid-sizing( 'grid-column-gap', $value ); 
      }
    }
    
    @each $key, $value in $space-map {
      .grid-row-#{$key}-gap#{nth($screen-sizes, $index)} { 
        @include poly-fluid-sizing( 'grid-row-gap', $value ); 
      }
    }

    @for $i from 1 through $max-grids {
      // Set columns
      // Equallly sized columns
      .col-rp-#{$i}#{nth($screen-sizes, $index)} { grid-template-columns: repeat(#{$i}, 1fr); }
      // 2 Column grid: right column wider
      .col-two-rw-#{$i}#{nth($screen-sizes, $index)} { grid-template-columns: 1fr #{$i}fr; }
      // 2 Column grid: left column wider
      .col-two-lw-#{$i}#{nth($screen-sizes, $index)} { grid-template-columns: #{$i}fr 1fr; }

      // Set rows
      // Equallly sized rows
      .row-rp-#{$i}#{nth($screen-sizes, $index)} { grid-template-rows: repeat(#{$i}, 1fr); }
      // Auto height size for all rows
      .row-auto-#{$i}#{nth($screen-sizes, $index)} { grid-template-rows: repeat(#{$i}, auto); }

      // Locate items in certain columns/rows
      .pin-col-#{$i}#{nth($screen-sizes, $index)} { grid-column: #{$i}; }
      .pin-row-#{$i}#{nth($screen-sizes, $index)} { grid-row: #{$i}; }

      // Locate item at i to i+j
      @for $j from 1 through $max-grids {
        .pin-col-#{$i}to#{$j}#{nth($screen-sizes, $index)} { grid-column: #{$i} / span #{$j}; }
        .pin-row-#{$i}to#{$j}#{nth($screen-sizes, $index)} { grid-row: #{$i} / span #{$j}; }
      }
    }

    @each $key, $value in $grid-justify-map {
      // Align child items horizontally. Can use every keys in the map.
      // Default behavior is start
      .grid-justify-#{$key}#{nth($screen-sizes, $index)} { justify-content: $value; }

      // Align child items vertically. Only use keys: start,end,center and stretch.
      .grid-align-#{$key}#{nth($screen-sizes, $index)} { align-items: $value; }

      // Classes may be applied to child items. Only use keys: start,end,center and stretch.
      .grid-self-align-#{$key}#{nth($screen-sizes, $index)} { align-self: $value; }
    }

    @each $key, $value in $grid-justify-map {
      .justify-self-#{$key}#{nth($screen-sizes, $index)} { justify-self: $value; }
    }


  }
}


